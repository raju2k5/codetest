import com.opencsv.CSVReader;
import com.opencsv.exceptions.CsvException;
import org.apache.avro.Schema;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericRecord;
import org.apache.parquet.avro.AvroParquetWriter;
import org.apache.parquet.hadoop.ParquetWriter;
import org.apache.parquet.hadoop.metadata.CompressionCodecName;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.core.ResponseInputStream;
import software.amazon.awssdk.core.exception.SdkClientException;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

@Service
public class S3Service {
    private static final Logger logger = LoggerFactory.getLogger(S3Service.class);
    private final S3Client s3Client;

    @Autowired
    public S3Service(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    public void convertCsvToParquetAndUpload(String bucketName, String fileKey, String fileTobeProcessed) throws IOException, CsvException {
        String tempFileName = "/tmp/output_" + System.currentTimeMillis() + ".parquet"; // Temporary file in Lambda environment

        try {
            // Read CSV data from S3
            List<String[]> csvData = readCsvFromS3(bucketName, fileKey);

            // Load the JSON schema based on fileTobeProcessed
            String jsonSchema = loadJsonSchema(fileTobeProcessed);
            Schema avroSchema = new Schema.Parser().parse(jsonSchema);

            // Convert CSV data to Parquet
            File parquetFile = convertCsvToParquet(csvData, avroSchema, tempFileName);

            // Upload Parquet file to S3
            String parquetFileKey = fileKey.replaceAll("\\.\\w+$", ".parquet");
            uploadParquetToS3(bucketName, parquetFileKey, parquetFile);
        } catch (Exception e) {
            logger.error("Error during processing: {}", e.getMessage());
            throw e;
        }
    }

    private String loadJsonSchema(String fileTobeProcessed) throws IOException {
        // Assuming the schema files are stored in src/main/resources/schemas/
        String schemaPath = "/schemas/" + fileTobeProcessed + ".json";
        InputStream inputStream = getClass().getResourceAsStream(schemaPath);

        if (inputStream == null) {
            throw new FileNotFoundException("Schema file not found: " + schemaPath);
        }

        return new String(inputStream.readAllBytes());
    }

    private List<String[]> readCsvFromS3(String bucketName, String key) throws IOException {
        GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                .bucket(bucketName)
                .key(key)
                .build();

        try (ResponseInputStream<GetObjectResponse> objectStream = s3Client.getObject(getObjectRequest);
             Reader reader = new InputStreamReader(objectStream);
             CSVReader csvReader = new CSVReader(reader)) {

            return csvReader.readAll();
        } catch (CsvException e) {
            logger.error("Error reading CSV data: {}", e.getMessage());
            throw new IOException("Error reading CSV data from S3", e);
        }
    }

    private File convertCsvToParquet(List<String[]> csvData, Schema avroSchema, String fileName) throws IOException {
        File parquetFile = new File(fileName);

        try (ParquetWriter<GenericRecord> writer = AvroParquetWriter.<GenericRecord>builder(new org.apache.hadoop.fs.Path(parquetFile.getAbsolutePath()))
                .withSchema(avroSchema)
                .withConf(new org.apache.hadoop.conf.Configuration())
                .withCompressionCodec(CompressionCodecName.SNAPPY)
                .build()) {

            boolean firstRow = true;

            for (String[] record : csvData) {
                if (firstRow) {
                    firstRow = false;
                    continue;
                }

                GenericRecord avroRecord = new GenericData.Record(avroSchema);

                for (Schema.Field field : avroSchema.getFields()) {
                    String fieldName = field.name();
                    int columnIndex = Arrays.asList(csvData.get(0)).indexOf(fieldName);
                    String value = record[columnIndex];
                    avroRecord.put(fieldName, value);
                }

                writer.write(avroRecord);
            }
        } catch (IOException e) {
            logger.error("Error writing Parquet file: {}", e.getMessage());
            throw new IOException("Error converting CSV data to Parquet", e);
        }

        return parquetFile;
    }

    private void uploadParquetToS3(String bucketName, String key, File parquetData) {
        try {
            s3Client.putObject(PutObjectRequest.builder()
                    .bucket(bucketName)
                    .key(key)
                    .build(),
                    RequestBody.fromFile(parquetData));
        } catch (SdkClientException e) {
            logger.error("Error uploading Parquet file to S3: {}", e.getMessage());
            throw new RuntimeException("Error uploading Parquet file to S3", e);
        }
    }
}
