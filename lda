@Test
void testConvertCsvToParquetAndUpload_RecordCount() throws IOException {
    String sourceBucketName = "source-bucket";
    String sourceFileKey = "path/to/source.csv";
    String fileTobeProcessed = "gbi_party";
    String destinationBucketName = "destination-bucket";
    String destinationFileKey = "path/to/destination.parquet";

    // Mock CSV data with a header and two rows
    String csvContent = "header1,header2\nvalue1,value2\nvalue3,value4";
    List<String[]> mockCsvData = Arrays.asList(
        new String[]{"header1", "header2"},
        new String[]{"value1", "value2"},
        new String[]{"value3", "value4"}
    );

    // Mock the S3 client behavior
    ResponseInputStream<GetObjectResponse> mockResponseInputStream = mock(ResponseInputStream.class);
    when(s3Client.getObject(any(GetObjectRequest.class))).thenReturn(mockResponseInputStream);
    when(mockResponseInputStream.readAllBytes()).thenReturn(csvContent.getBytes());

    // Mock the schema loading
    String schemaJson = "{\"type\": \"record\", \"name\": \"test\", \"fields\": [{\"name\": \"header1\", \"type\": \"string\"}, {\"name\": \"header2\", \"type\": \"string\"}, {\"name\": \"EFF_DT\", \"type\": \"string\"}, {\"name\": \"ETL_TS\", \"type\": \"string\"}]}";
    when(snapshotService.loadJsonSchema(anyString())).thenReturn(schemaJson);

    // Mock the convertCsvToParquet method to return a dummy file object
    File mockedFile = new File("mocked-file.parquet");
    when(snapshotService.convertCsvToParquet(anyList(), any(Schema.class), anyString())).thenReturn(mockedFile);

    // Call the method under test and check for exceptions
    assertDoesNotThrow(() -> snapshotService.convertCsvToParquetAndUpload(sourceBucketName, sourceFileKey, fileTobeProcessed, destinationBucketName, destinationFileKey));

    // Verify the CSV data passed
    verify(snapshotService).convertCsvToParquet(anyList(), any(Schema.class), anyString());

    // Verify that the S3 upload was attempted
    verify(s3Client).putObject(any(PutObjectRequest.class), any(RequestBody.class));
}
