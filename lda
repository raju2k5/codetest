public static ByteArrayOutputStream convertCsvToParquet(List<CSVRecord> records) throws IOException {
        // Extract headers from the first record to create the Parquet schema dynamically
        String[] headers = records.get(0).toMap().keySet().toArray(new String[0]);

        // Define the Parquet schema dynamically
        MessageType schema = MessageTypeParser.parseMessageType("message CsvSchema {" +
                String.join(",", List.of(headers).stream()
                        .map(header -> "  required binary " + header.replace(" ", "_") + ";")
                        .toArray(String[]::new)) +
                "}");

        // Prepare a ByteArrayOutputStream to hold Parquet data
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        // Configure Parquet writing
        GroupWriteSupport writeSupport = new GroupWriteSupport();
        writeSupport.setSchema(schema);

        // Create ParquetWriter instance
        ParquetWriter<org.apache.hadoop.io.NullWritable> writer = new ParquetWriter<>(
                new org.apache.hadoop.fs.Path("inmemory"), // Output path (not used for in-memory write)
                writeSupport, // GroupWriteSupport
                ParquetWriter.DEFAULT_COMPRESSION_CODEC_NAME,
                ParquetWriter.DEFAULT_BLOCK_SIZE,
                ParquetWriter.DEFAULT_PAGE_SIZE,
                ParquetWriter.MAX_PADDING_SIZE // Added maximum padding size
        );

        // Convert CSV records to Parquet Groups and write them to ParquetWriter
        for (CSVRecord record : records) {
            GroupWriteSupport.writeRecord(record, writer);
        }

        // Close writer and ByteArrayOutputStream
        writer.close();
        baos.close();

        return baos;
    }
