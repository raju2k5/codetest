public static ByteArrayOutputStream convertCsvToParquet(List<CSVRecord> records) throws IOException {
        // Extract headers from the first record to create the Parquet schema dynamically
        String[] headers = records.get(0).toMap().keySet().toArray(new String[0]);

        // Define the Parquet schema dynamically
        MessageType schema = MessageTypeParser.parseMessageType("message CsvSchema {" +
                String.join("", List.of(headers).stream()
                        .map(header -> "  required binary " + header + ";")
                        .toArray(String[]::new)) +
                "}");

        // Prepare a ByteArrayOutputStream to hold Parquet data
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        // Configure Parquet writing
        Configuration conf = new Configuration(); // Hadoop Configuration
        GroupWriteSupport writeSupport = new GroupWriteSupport();
        writeSupport.setSchema(schema, conf);

        ParquetWriter<Group> writer = new ParquetWriter<>(new Path("inmemory"), (WriteSupport<Group>) writeSupport,
                ParquetWriter.DEFAULT_COMPRESSION_CODEC_NAME,
                ParquetWriter.DEFAULT_BLOCK_SIZE,
                ParquetWriter.DEFAULT_PAGE_SIZE,
                ParquetWriter.DEFAULT_PAGE_SIZE,
                ParquetWriter.DEFAULT_IS_DICTIONARY_ENABLED,
                ParquetWriter.DEFAULT_IS_VALIDATING_ENABLED,
                ParquetWriter.DEFAULT_WRITER_VERSION,
                conf);

        // Convert CSV records to Parquet Groups and write them to ByteArrayOutputStream
        SimpleGroupFactory groupFactory = new SimpleGroupFactory(schema);
        for (CSVRecord record : records) {
            Group group = groupFactory.newGroup();
            for (String header : headers) {
                group.append(header, record.get(header));
            }
            writer.write(group);
        }

        // Close writer and ByteArrayOutputStream
        writer.close();
        baos.close();

        return baos;
    }
