@Override
public List<String[]> readCsvFromS3(String bucketName, String key) throws IOException, SdkClientException {
    GetObjectRequest getObjectRequest = GetObjectRequest.builder()
            .bucket(bucketName)
            .key(key)
            .build();

    try (ResponseInputStream<GetObjectResponse> objectStream = s3Client.getObject(getObjectRequest);
         Reader reader = new InputStreamReader(objectStream);
         CSVReader csvReader = new CSVReader(reader)) {

        List<String[]> csvData = csvReader.readAll();
        return csvData.isEmpty() ? Collections.emptyList() : csvData; // Ensure empty list if no data
    } catch (CsvException e) {
        throw new IOException("Error reading CSV data from S3", e);
    }
}



@Test
void testConvertCsvToParquetAndUpload_WithEmptyCsv() throws IOException {
    String sourceBucketName = "source-bucket";
    String sourceFileKey = "source.csv";
    String fileTobeProcessed = "gbi_party";
    String destinationBucketName = "destination-bucket";
    String destinationFileKey = "destination.parquet";

    ResponseInputStream<GetObjectResponse> responseInputStream = mock(ResponseInputStream.class);
    when(s3Client.getObject(any(GetObjectRequest.class))).thenReturn(responseInputStream);
    when(responseInputStream.readAllBytes()).thenReturn("".getBytes()); // Simulating empty CSV

    // Mock other necessary methods...
    
    assertDoesNotThrow(() -> snapshotService.convertCsvToParquetAndUpload(sourceBucketName, sourceFileKey, fileTobeProcessed, destinationBucketName, destinationFileKey));

    verify(s3Client).getObject(any(GetObjectRequest.class));
    verify(s3Client, never()).putObject(any(PutObjectRequest.class), any(RequestBody.class)); // No upload should occur
}
