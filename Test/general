import com.opencsv.exceptions.CsvException;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import software.amazon.awssdk.core.ResponseInputStream;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.GetObjectResponse;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class S3ServiceTest {

    @Mock
    private S3Client s3Client;

    @InjectMocks
    private S3Service s3Service;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testConvertCsvToParquetAndUpload_Success() throws IOException, CsvException {
        // Setup
        String bucketName = "test-bucket";
        String fileKey = "test.csv";
        String jsonSchema = "{\"type\":\"record\",\"name\":\"Test\",\"fields\":[{\"name\":\"field1\",\"type\":\"string\"},{\"name\":\"field2\",\"type\":\"string\"}]}";

        // Simulate CSV data as a string
        String csvContent = "field1,field2\nvalue1,value2";
        InputStream inputStream = new ByteArrayInputStream(csvContent.getBytes());

        // Create a spy for ResponseInputStream that wraps around the simulated InputStream
        GetObjectResponse getObjectResponse = mock(GetObjectResponse.class);
        ResponseInputStream<GetObjectResponse> responseInputStream = spy(new ResponseInputStream<>(getObjectResponse, inputStream));

        // Mock S3Client's getObject method to return the mocked ResponseInputStream
        when(s3Client.getObject(any(GetObjectRequest.class))).thenReturn(responseInputStream);

        // Execute the method
        s3Service.convertCsvToParquetAndUpload(bucketName, fileKey, jsonSchema);

        // Verify that the S3Client's methods were called
        verify(s3Client).getObject(any(GetObjectRequest.class));
        verify(s3Client).putObject(any(PutObjectRequest.class), any(RequestBody.class));
    }
}
